/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author user
 */

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.Statement;
import net.proteanit.sql.DbUtils;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import javax.swing.RowFilter;
import java.util.UUID;
import java.util.Random;
import java.util.Date;
import java.sql.Timestamp;


public class SellMedicine extends javax.swing.JFrame {
    public String numberPattern="^[0-9]*$";
   private String billId="";
//    private String username="";
    /**
     * Creates new form SellMedicine
     */
    public SellMedicine() {
        initComponents();
        displayMedTable();
        clearMedicineTable();
    }
     Connection Con=null;
    Statement St=null, St1=null;
    ResultSet Rs=null,RS;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        SellMed_Close = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        SMmedId = new javax.swing.JTextField();
        SMtotalPrice = new javax.swing.JTextField();
        SMcompany = new javax.swing.JTextField();
        SMexpiryDate = new javax.swing.JTextField();
        SMunitPrice = new javax.swing.JTextField();
        SMnoOfUnits = new javax.swing.JTextField();
        SMmedName = new javax.swing.JTextField();
        SMdosage = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        SMmedicineTable = new javax.swing.JTable();
        AddtoCart = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        manageMedTable = new javax.swing.JTable();
        medSearch = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        lblFinalTotalPrice = new javax.swing.JTextField();
        SMcustId = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        submitBTN = new javax.swing.JButton();
        deleteBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 153, 51));

        SellMed_Close.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        SellMed_Close.setForeground(new java.awt.Color(204, 0, 51));
        SellMed_Close.setText("X");
        SellMed_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellMed_CloseActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 153, 0));
        jLabel1.setFont(new java.awt.Font("Microsoft New Tai Lue", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("SELL MEDICINE- SELECT PRODUCTS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(428, 428, 428)
                .addComponent(SellMed_Close)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(SellMed_Close)
                        .addGap(0, 20, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jLabel2.setText("Customer ID");

        jLabel3.setText("Medicine Name");

        jLabel4.setText("Expiry date");

        jLabel6.setText("Company Name");

        jLabel7.setText(" Unit price");

        jLabel8.setText("No of Units");

        jLabel9.setText("Dosage");

        jLabel10.setText("Total  price");

        SMmedId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SMmedIdActionPerformed(evt);
            }
        });

        SMunitPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SMunitPriceActionPerformed(evt);
            }
        });

        SMnoOfUnits.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SMnoOfUnitsKeyReleased(evt);
            }
        });

        SMmedName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SMmedNameActionPerformed(evt);
            }
        });

        SMmedicineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Medicine ID", "Medicine Name", "Company", "Dosage", "Expiry Date", "Unit price", "No of Units", "Total Price"
            }
        ));
        SMmedicineTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SMmedicineTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(SMmedicineTable);

        AddtoCart.setText("ADD TO CART");
        AddtoCart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddtoCartMouseClicked(evt);
            }
        });
        AddtoCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddtoCartActionPerformed(evt);
            }
        });

        manageMedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Medicine ID", "Batch No", "Medicine Name", "Category", "mg", "Dosage", "Description", "Expiry Date", "Company", "Quantity", "Price Per Unit", "Restock Date"
            }
        ));
        manageMedTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                manageMedTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(manageMedTable);

        medSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medSearchActionPerformed(evt);
            }
        });
        medSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                medSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                medSearchKeyReleased(evt);
            }
        });

        jLabel11.setText("SEARCH");

        jTextField1.setText("Total Amount");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        lblFinalTotalPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblFinalTotalPriceActionPerformed(evt);
            }
        });

        SMcustId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SMcustIdActionPerformed(evt);
            }
        });

        jLabel5.setText("Medicine ID");

        submitBTN.setText("SUBMIT");
        submitBTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                submitBTNMouseClicked(evt);
            }
        });
        submitBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBTNActionPerformed(evt);
            }
        });

        deleteBTN.setText("DELETE");
        deleteBTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteBTNMouseClicked(evt);
            }
        });
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(27, 27, 27)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SMcustId, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(156, 156, 156)
                                .addComponent(AddtoCart, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 896, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SMcompany, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SMmedName, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SMmedId, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SMdosage, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SMunitPrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SMexpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SMnoOfUnits, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SMtotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addComponent(medSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(657, 657, 657)
                        .addComponent(deleteBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(lblFinalTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(171, 171, 171)
                        .addComponent(submitBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1094, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(37, 37, 37)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(1412, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SMexpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SMmedId, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(SMmedName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(SMunitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(11, 11, 11)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SMnoOfUnits, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SMtotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(SMcompany, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SMdosage, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(AddtoCart, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(SMcustId, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFinalTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(submitBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(deleteBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(128, 128, 128)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(625, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SellMed_CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellMed_CloseActionPerformed
        // TODO add your handling code here:
        int choice = JOptionPane.showConfirmDialog(this, "Are you sure?", "Exit", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (choice == JOptionPane.YES_OPTION) {
            Dashboard prevPage = new Dashboard();
            prevPage.setVisible(true);
        }
    }//GEN-LAST:event_SellMed_CloseActionPerformed

    private void SMmedIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SMmedIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SMmedIdActionPerformed

    private void SMmedNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SMmedNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SMmedNameActionPerformed

    private int purchaseId=-1;
        double totalCost = 0;
    private void AddtoCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddtoCartActionPerformed
//         TODO add your handling code here:
       Connection Con = null;                                                                             
    String productId = SMmedId.getText().trim();
    String quantity = SMnoOfUnits.getText().trim();
   String productName = SMmedName.getText().trim();
   String company = SMcompany.getText().trim();
   String dosage = SMdosage.getText().trim();
   String expiryDate = SMexpiryDate.getText().trim();
   String unitPrice = SMunitPrice.getText().trim();
   String total = SMtotalPrice.getText().trim();
   
   

    if (!productId.isEmpty() && !quantity.isEmpty()) {
        try {
            Con = java.sql.DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb", "root", "Sql@2003");
            // Check if the product exists and is in stock
            String query = "SELECT product_id, SUM(quantity_available) AS total_quantity FROM Products "
                    + "WHERE product_id = ? GROUP BY product_id"
                    + " HAVING total_quantity >= ?";
            PreparedStatement pstmt = Con.prepareStatement(query);
            pstmt.setString(1, productId);
            pstmt.setString(2, quantity);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                
                // Retrieve the selected row index from manageMedTable
                int selectedRow = manageMedTable.getSelectedRow();
                if (selectedRow != -1) { // Check if a row is selected
                    // Get the value of the batch number from the selected row
                    String batchNo = manageMedTable.getModel().getValueAt(selectedRow, 1).toString(); // Assuming batch number is in the second column (index 1)
                    String updateQuery = "UPDATE Products SET quantity_available = quantity_available - ? WHERE product_id = ? AND batch_no = ?";
                    PreparedStatement updatePstmt = Con.prepareStatement(updateQuery);
                    updatePstmt.setString(1, quantity);                    
                    updatePstmt.setString(2, productId);
                    updatePstmt.setString(3, batchNo);
                    updatePstmt.executeUpdate();

                    if (purchaseId == -1) {
                        // Generate a new purchase ID if it's not set yet
                        Random random = new Random();
                        int minPurchaseId = 1000;
                        int maxPurchaseId = 9999;
                        purchaseId = random.nextInt(maxPurchaseId - minPurchaseId + 1) + minPurchaseId;
                    }


                    String insertQuery = "INSERT INTO purchase_items (purchase_id, prod_id, b_no, quantity) VALUES (?, ?, ?, ?)";
                    PreparedStatement insertPstmt = Con.prepareStatement(insertQuery);
                    // Assuming you have a purchaseId generated earlier
                    insertPstmt.setInt(1, purchaseId);
                    insertPstmt.setString(2, productId);
                    insertPstmt.setString(3, batchNo);
                    insertPstmt.setString(4, quantity);
                    insertPstmt.executeUpdate();
         
                Object[] row = {productId, productName, company, dosage, expiryDate, unitPrice, quantity, total};
                DefaultTableModel cartModel = (DefaultTableModel) SMmedicineTable.getModel();
                cartModel.addRow(row);
               updateTotalAmount();

       
                    // Display success message
                    JOptionPane.showMessageDialog(null, "Product added to cart successfully.");
                    clearMedicineFields();
                    displayMedTable();
                } else {
                    // No row selected, handle this case according to your requirements
                    JOptionPane.showMessageDialog(null, "Please select a batch from the manageMedTable.");
                }
            } else {
                // Product not found or not in stock
                JOptionPane.showMessageDialog(null, "Product not found or insufficient quantity available.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error: Failed to add product to cart.");
        }
        finally {
        // Close the connection in the finally block to ensure it's always closed
        if (Con != null) {
            try {
                Con.close();
            } catch (SQLException e) {
                e.printStackTrace();
                // Handle closing failure if necessary
            }
        }
    }
    } else {
        // Empty fields
        JOptionPane.showMessageDialog(null, "Please enter product ID and quantity.");
    }  
    }//GEN-LAST:event_AddtoCartActionPerformed
    private void updateTotalAmount() {
    DefaultTableModel cartModel = (DefaultTableModel) SMmedicineTable.getModel();
    double totalAmount = 0.0;

    // Iterate through each row in the cart table
    for (int i = 0; i < cartModel.getRowCount(); i++) {
        // Get the total price value from the current row and parse it to double
        String totalPriceStr = cartModel.getValueAt(i, 7).toString();
        double totalPrice = Double.parseDouble(totalPriceStr);

        // Add the total price to the total amount
        totalAmount += totalPrice;
    }

    // Update the lblFinalTotalPrice label with the calculated total amount
    lblFinalTotalPrice.setText(String.valueOf(totalAmount));
}

    
    private void clearMedicineFields(){
        SMmedId.setText(" ");
        SMmedName.setText(" ");
        SMcompany.setText("");
        SMdosage.setText("");
        SMexpiryDate.setText("");
        SMunitPrice.setText("");
        SMnoOfUnits.setText("");
        SMtotalPrice.setText("");
    }
    private void clearMedicineTable() {
    DefaultTableModel cartModel = (DefaultTableModel) SMmedicineTable.getModel();
    cartModel.setRowCount(0); // Clears the table
}
    private void manageMedTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_manageMedTableMouseClicked
        // TODO add your handling code here
         DefaultTableModel model=(DefaultTableModel)manageMedTable.getModel();
       int rowIndex=manageMedTable.getSelectedRow();
       if(rowIndex!=-1){
        SMmedId.setText(model.getValueAt(rowIndex,0).toString());
        SMmedName.setText(model.getValueAt(rowIndex,2).toString());
        
        SMdosage.setText(model.getValueAt(rowIndex,5).toString());
        SMexpiryDate.setText(model.getValueAt(rowIndex,7).toString());
        SMunitPrice.setText(model.getValueAt(rowIndex,10).toString());
        String batchNo = manageMedTable.getModel().getValueAt(rowIndex,1).toString(); // Assuming batch number is in the second column (index 1)
    // Use the retrieved batch number in your insertion statement
        int manufactureId = Integer.parseInt(model.getValueAt(rowIndex, 8).toString());

        // Fetch the company name from the COMPANY table using the manufacturer ID
        String companyName = getCompanyName(manufactureId); // Implement this method

        // Display the fetched company name in the appropriate field
        SMcompany.setText(companyName);

        SMnoOfUnits.setText("");
        SMtotalPrice.setText("");      
       } 
        
    }//GEN-LAST:event_manageMedTableMouseClicked
    private String getCompanyName(int manufactureId) {
    String companyName = null;
    try {
        String query = "SELECT M_NAME FROM MANUFACTURER WHERE MANUFACTURE_ID = ?";
        PreparedStatement pstmt = Con.prepareStatement(query);
        pstmt.setInt(1, manufactureId);
        ResultSet rs = pstmt.executeQuery();
        if (rs.next()) {
            companyName = rs.getString("M_NAME");
        }
        rs.close();
        pstmt.close();
    } catch (SQLException e) {
        e.printStackTrace();
        // Handle any exceptions here
    }
    return companyName;
}
    private void medSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_medSearchActionPerformed

    private void medSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_medSearchKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_medSearchKeyPressed

    private void medSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_medSearchKeyReleased
        // TODO add your handling code here
        DefaultTableModel ob=(DefaultTableModel) manageMedTable.getModel();
        TableRowSorter<DefaultTableModel> obj=new TableRowSorter<>(ob);
        manageMedTable.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(medSearch.getText()));
    }//GEN-LAST:event_medSearchKeyReleased

    private void lblFinalTotalPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblFinalTotalPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lblFinalTotalPriceActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void SMnoOfUnitsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SMnoOfUnitsKeyReleased
        // TODO add your handling code here:
        String noOfUnits=SMnoOfUnits.getText();
        if(!noOfUnits.equals("")){
            String price=SMunitPrice.getText();
            if(!noOfUnits.matches(numberPattern)){
                JOptionPane.showMessageDialog(null,"number of Units field is invalid" );
            }
        
        double totalPrice=Double.parseDouble(noOfUnits) * Double.parseDouble(price);
        SMtotalPrice.setText(String.valueOf(totalPrice));
        }
        else{
            SMtotalPrice.setText("");
        }       
    }//GEN-LAST:event_SMnoOfUnitsKeyReleased

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentShown

    private void AddtoCartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddtoCartMouseClicked
        // TODO add your handling code here:    
    }//GEN-LAST:event_AddtoCartMouseClicked

    private void SMmedicineTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SMmedicineTableMouseClicked
        // TODO add your handling code here:
                 DefaultTableModel model=(DefaultTableModel)SMmedicineTable.getModel();
       int rowIndex=SMmedicineTable.getSelectedRow();
       if(rowIndex!=-1){
        SMmedId.setText(model.getValueAt(rowIndex,0).toString());
        SMmedName.setText(model.getValueAt(rowIndex,1).toString());
        SMcompany.setText(model.getValueAt(rowIndex,2).toString());
        SMdosage.setText(model.getValueAt(rowIndex,3).toString());
        SMexpiryDate.setText(model.getValueAt(rowIndex,4).toString());
        SMunitPrice.setText(model.getValueAt(rowIndex,5).toString());
        SMnoOfUnits.setText(model.getValueAt(rowIndex,6).toString());
        SMtotalPrice.setText(model.getValueAt(rowIndex,7).toString());
//        custId_txt.setEditable(false);
       }
       /*int index=SMmedicineTable.getSelectedRow();
       int a=JOptionPane.showConfirmDialog(null,"do you want to remove this medicine","Select",JOptionPane.YES_NO_OPTION);
       if(a==0){
           TableModel model = SMmedicineTable.getModel();
           String total = model.getValueAt(index, 7).toString();
           totalCost=totalCost-Integer.parseInt(total);
           lblFinalTotalPrice.setText(String.valueOf(totalCost));
            ((DefaultTableModel)SMmedicineTable.getModel()).removeRow(index);
       }*/
    }//GEN-LAST:event_SMmedicineTableMouseClicked

    private void SMunitPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SMunitPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SMunitPriceActionPerformed

    private void SMcustIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SMcustIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SMcustIdActionPerformed

    private void submitBTNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submitBTNMouseClicked
        // TODO add your handling code here:
        try {
        // Establish the database connection
        Con = java.sql.DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb", "root", "Sql@2003");

        // Retrieve product name from the text field
        String custId = SMcustId.getText().trim();
        String total_cost=lblFinalTotalPrice.getText().trim();
        Date currentDate = new Date();
        
        // Convert the java.util.Date object to java.sql.Timestamp
        Timestamp currentTimestamp = new Timestamp(currentDate.getTime());
        
        
        // You can store the current timestamp in a variable for further use
        Timestamp storedTimestamp = currentTimestamp;
       
      // Prepare the INSERT statement
        PreparedStatement add = Con.prepareStatement("INSERT INTO PURCHASE "
                + "(purchase_id,cust_id, purchase_date,total_cost) VALUES(?,?,?,?)");

        // Set parameters for the INSERT statement
        add.setString(1,  String.valueOf(purchaseId));
        add.setString(2, custId);
        add.setTimestamp(3, storedTimestamp); // Use the retrieved product name
        add.setString(4, total_cost);
    
        // Execute the INSERT statement
        int row = add.executeUpdate();
        javax.swing.JOptionPane.showMessageDialog(this, "Medicine added Successfully");
        // Close the database connection
        Con.close();

    } catch (SQLException e) {
        // Handle SQL exceptions
        e.printStackTrace();
        // You may want to display an error message to the user here
    } catch (NumberFormatException e) {
        // Handle parsing errors for dosage
        e.printStackTrace();
        // You may want to display an error message to the user here
    }
    }//GEN-LAST:event_submitBTNMouseClicked

    private void deleteBTNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteBTNMouseClicked
        // TODO add your handling code here:
   
    }//GEN-LAST:event_deleteBTNMouseClicked

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteBTNActionPerformed

    private void submitBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBTNActionPerformed

    }//GEN-LAST:event_submitBTNActionPerformed

      public void displayMedTable(){
    try{
    Con=DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacydb","root","Sql@2003");
    String query = "SELECT PRODUCT_ID AS 'MEDICINE ID', BATCH_NO, P_NAME AS 'MEDICINE NAME',CATEGORY, MG , DOSAGE,DESCRIPTION, EXPIRY_DATE,MAN_ID, QUANTITY_AVAILABLE ,PRICE AS 'PRICE PER UNIT',LAST_RESTOCK_DATE , STATUS FROM PRODUCTS  WHERE STATUS = 'ACTIVE'";
    St=Con.createStatement();
    Rs=St.executeQuery(query);
    manageMedTable.setModel(DbUtils.resultSetToTableModel(Rs));
    }catch(SQLException e){
        e.printStackTrace();
    } 
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SellMedicine().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddtoCart;
    private javax.swing.JTextField SMcompany;
    private javax.swing.JTextField SMcustId;
    private javax.swing.JTextField SMdosage;
    private javax.swing.JTextField SMexpiryDate;
    private javax.swing.JTextField SMmedId;
    private javax.swing.JTextField SMmedName;
    private javax.swing.JTable SMmedicineTable;
    private javax.swing.JTextField SMnoOfUnits;
    private javax.swing.JTextField SMtotalPrice;
    private javax.swing.JTextField SMunitPrice;
    private javax.swing.JButton SellMed_Close;
    private javax.swing.JButton deleteBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField lblFinalTotalPrice;
    private javax.swing.JTable manageMedTable;
    private javax.swing.JTextField medSearch;
    private javax.swing.JButton submitBTN;
    // End of variables declaration//GEN-END:variables
}
